#!/usr/bin/python

from argparse import ArgumentParser, ArgumentTypeError
from itertools import product
import os
import sys
import subprocess

# run the executable with given parameters
def run_with_parameters(dir, p, n):
    # should be in the same directory as this file
    executable = os.path.join(dir, 'sort')
    p = subprocess.Popen(['mpirun', '-np', str(p), executable, '-n', str(n), '-r'],
                          stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    # get output from stdout and stderr
    result, errors = p.communicate()
    # print out the result from stdout
    try:
      return float(errors.strip().split()[-2])
    except:
      print 'result: ', result 
      print 'errors: ', errors
      raise

def processor(x):
    x = int(x)
    if x <= 0:
        raise ArgumentTypeError('invalid processor value: %d, not greater than 0'%(x,))
    return x

def size(x):
    x = int(x)
    if x <= 0:
        raise ArgumentTypeError('invalid size value: %d, not greater than 0'%(x,))
    return x

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('-p', help = 'Number of processors to be used.', required = True,
                        type = processor, nargs = '+', metavar = 'PROCESSORS')
    parser.add_argument('-n', help = 'Size of the input.', required = True,
                        type = size, nargs = '+', metavar = 'SIZE')
    parser.add_argument('--repeat', help = 'Number of repetitions.',
                        type = int, default = 5, metavar = 'COUNT')
    parser.add_argument('--dir', help = 'Directory which contains the executable "sort".',
                        type = str, default = os.path.join(os.environ.get('HOME'), 'CSE6220', 'prog3'), metavar = 'PATH')
    args = parser.parse_args()

    #with open('timings.txt', 'wb') as t:
    with sys.stderr as t:
      t.write('p\tn\tTime(s)\n')
      for params in product(args.p, args.n):
          time = 0.0
          t.write('%d\t%d'%params)
          for run in range(args.repeat):
              time = run_with_parameters(args.dir, *params)
              t.write('\t%r'%(time))
          t.write('\n')
          t.flush()
